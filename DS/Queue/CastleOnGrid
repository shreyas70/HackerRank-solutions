#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

pair<int,int> numberToNode(int i,int size)
{
    return make_pair(i/size,i%size);
}

int nodeToNumber(int i,int j,int size)
{
    return i*size+j;
}

// Complete the minimumMoves function below.
int minimumMoves(vector<string> grid, int startX, int startY, int goalX, int goalY) 
{
    int nodes_number=grid.size()*grid.size();
    vector<int> adj[nodes_number];


    for(int i=0;i<nodes_number;i++)
    {
        auto node=numberToNode(i,grid.size());
        // cout << i << " | " << node.first << " x " << node.second <<endl;  

        int row=node.first;
        int col=node.second;
        while(row-1>=0) //top nodes
        {
            row=row-1;
            if(grid[row][col]!='X')
                adj[i].push_back(nodeToNumber(row,col,grid.size()));
            else
                break;
        }

        row=node.first;
        col=node.second;
        while(row+1<grid.size()) //bottom nodes
        {
            row=row+1;
            if(grid[row][col]!='X')
                adj[i].push_back(nodeToNumber(row,col,grid.size()));
            else
                break;
        }

        row=node.first;
        col=node.second;
        while(col+1<grid.size()) //right nodes
        {
            col=col+1;
            if(grid[row][col]!='X')
                adj[i].push_back(nodeToNumber(row,col,grid.size()));
            else
                break;
        }

        row=node.first;
        col=node.second;
        while(col-1>=0) //left nodes
        {
            col=col-1;
            if(grid[row][col]!='X')
                adj[i].push_back(nodeToNumber(row,col,grid.size()));
            else
                break;
        }
    

    }

    //bfs
    queue< pair<int,int> > q;
    int min=INT_MAX;
    q.push(make_pair(nodeToNumber(startX,startY,grid.size()),0));
    vector<int> visited(nodes_number,0);

    while(!q.empty())
    {
        auto n = q.front();
        q.pop();
        int nodeN = n.first;
        int dist = n.second;
        visited[nodeN]=1;

        for( auto x:adj[nodeN])
        {
            
            auto pairNode = numberToNode(nodeN,grid.size());
            if(pairNode.first == goalX && pairNode.second== goalY)
            {
                //bfs will always find shortest path
                return dist;
            }
            else if(!visited[x])
            {
                q.push(make_pair(x,dist+1));
                visited[x]=1;
            }
        }
    }
    return min;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));
    // freopen("input.txt","r",stdin);

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<string> grid(n);

    for (int i = 0; i < n; i++) {
        string grid_item;
        getline(cin, grid_item);

        grid[i] = grid_item;
    }

    string startXStartY_temp;
    getline(cin, startXStartY_temp);

    vector<string> startXStartY = split_string(startXStartY_temp);

    int startX = stoi(startXStartY[0]);

    int startY = stoi(startXStartY[1]);

    int goalX = stoi(startXStartY[2]);

    int goalY = stoi(startXStartY[3]);

    int result = minimumMoves(grid, startX, startY, goalX, goalY);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
// 
